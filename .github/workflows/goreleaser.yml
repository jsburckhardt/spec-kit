name: Release gospecify with GoReleaser

on:
  push:
    tags:
      - 'gospecify/v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write  # Required for keyless signing with cosign
  attestations: write  # Required for build attestations

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/gospecify

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'
          cache-dependency-path: src/gospecify/go.sum

      - name: Install GoReleaser
        run: go install github.com/goreleaser/goreleaser/v2@latest

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.0'

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Verify tools installation
        run: |
          goreleaser --version
          cosign version
          syft version

      - name: Run GoReleaser (dry-run for testing)
        if: github.event_name == 'workflow_dispatch'
        run: goreleaser release --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate cosign key-pair (for testing)
        if: github.event_name == 'workflow_dispatch'
        run: |
          cosign generate-key-pair
          echo "COSIGN_PRIVATE_KEY=$(cat cosign.key)" >> $GITHUB_ENV
          echo "COSIGN_PASSWORD=password" >> $GITHUB_ENV

      - name: Run GoReleaser (production release)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/gospecify/')
        run: goreleaser release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-artifacts
          path: |
            src/gospecify/dist/
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: goreleaser
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/gospecify/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: goreleaser-artifacts
          path: artifacts/

      - name: Install security scanning tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Verify signatures
        run: |
          find artifacts/ -name "*.sig" -exec bash -c '
            artifact="${1%.sig}"
            sig="${1}"
            echo "Verifying signature for $artifact"
            cosign verify-blob --key ${{ secrets.COSIGN_PUBLIC_KEY }} --signature "$sig" "$artifact" || echo "Signature verification failed for $artifact"
          ' _ {} \;

      - name: Validate SBOM
        run: |
          find artifacts/ -name "*.sbom.json" -exec bash -c '
            sbom_file="$1"
            echo "Validating SBOM: $sbom_file"
            jq -e ".spdxVersion" "$sbom_file" > /dev/null && echo "✓ Valid SPDX SBOM" || echo "✗ Invalid SBOM"
          ' _ {} \;

      - name: Verify checksums
        run: |
          if [ -f "artifacts/checksums.txt" ]; then
            cd artifacts/
            sha256sum -c checksums.txt || echo "Checksum verification failed"
          fi

  provenance:
    runs-on: ubuntu-latest
    needs: goreleaser
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/gospecify/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'src/gospecify/dist/gospecify*'

      - name: Upload provenance attestations
        uses: actions/upload-artifact@v4
        with:
          name: provenance-attestations
          path: |
            *.json
          retention-days: 365